<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LEotA.Engine.Web</name>
    </assembly>
    <members>
        <member name="T:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesAuthentication">
            <summary>
            ASP.NET Core services registration and configurations
            Authentication path
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesAuthentication.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)" -->
        <member name="T:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesBase">
            <summary>
            ASP.NET Core services registration and configurations
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesBase.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            ConfigureServices Services
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesControllers">
            <summary>
            Configure controllers
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesControllers.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure services
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesCors">
            <summary>
            Cors configurations
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesCors.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            ConfigureServices
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="T:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesMediator">
            <summary>
            ASP.NET Core services registration and configurations
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesMediator.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            ConfigureServices Services
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesSwagger">
            <summary>
            Swagger configuration
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesSwagger.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            ConfigureServices Swagger services
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesSwagger.SwaggerSettings(Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions)">
            <summary>
            Set up some properties for swagger UI
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesValidators">
            <summary>
            ASP.NET Core services registration and configurations
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.ConfigureServices.ConfigureServicesValidators.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            ConfigureServices Services
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:LEotA.Engine.Web.AppStart.Configures.ConfigureAuthentication">
            <summary>
            Configure pipeline
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.Configures.ConfigureAuthentication.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configure Routing
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:LEotA.Engine.Web.AppStart.Configures.ConfigureCommon">
            <summary>
            Pipeline configuration
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.Configures.ConfigureCommon.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,AutoMapper.IConfigurationProvider)">
            <summary>
            Configure pipeline
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="mapper"></param>
        </member>
        <member name="T:LEotA.Engine.Web.AppStart.Configures.ConfigureEndpoints">
            <summary>
            Configure pipeline
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.Configures.ConfigureEndpoints.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configure Routing
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:LEotA.Engine.Web.AppStart.IdentityServerConfig">
            <summary>
            IdentityServer configuration
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.IdentityServerConfig.GetClients">
            <summary>
            clients want to access resources (aka scopes)
            </summary>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.IdentityServerConfig.GetIdentityResources">
            <summary>
            scopes define the resources in your system
            </summary>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.IdentityServerConfig.GetApiResources">
            <summary>
            IdentityServer4 API resources
            </summary>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.AppStart.MapperRegistration">
            <summary>
            AutoMapper profiles registration
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.MapperRegistration.GetMapperConfiguration">
            <summary>
            Create and build mapper profiles
            </summary>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.AppStart.SwaggerFilters.ApplySummariesOperationFilter">
            <summary>
            Swagger Method Info Generator from summary for <see cref="M:GetPaged{T}"/>
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.AppStart.SwaggerFilters.ApplySummariesOperationFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Controllers.AccountController">
            <summary>
            Account Controller
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Controllers.AccountController.#ctor(LEotA.Engine.Web.Infrastructure.Services.IAccountService)">
            <summary>
            Register controller
            </summary>
            <param name="accountService"></param>
        </member>
        <member name="M:LEotA.Engine.Web.Controllers.AccountController.Register(LEotA.Engine.Web.ViewModels.AccountViewModels.RegisterViewModel)">
            <summary>
            Register new user. Success registration returns UserProfile for new user.
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Controllers.AccountController.Profile">
            <summary>
            Returns profile information for authenticated user
            </summary>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.Controllers.LogsReadonly2Controller">
            <summary>
            ReadOnlyController Demo
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Controllers.LogsReadonly2Controller.#ctor(Microsoft.Extensions.Options.IOptions{LEotA.Engine.Web.Infrastructure.Settings.CurrentAppSettings},Calabonga.UnitOfWork.IUnitOfWork{LEotA.Engine.Data.ApplicationDbContext},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Controllers.LogsReadonly2Controller.ValidateQueryParams(Calabonga.Microservices.Core.QueryParams.PagedListQueryParams)">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Controllers.LogsReadonlyController">
            <summary>
            ReadOnlyController Demo
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Controllers.LogsWritable2Controller">
            <summary>
            WritableController Demo
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Controllers.LogsWritable2Controller.#ctor(Microsoft.Extensions.Options.IOptions{LEotA.Engine.Web.Infrastructure.Settings.CurrentAppSettings},Calabonga.UnitOfWork.Controllers.Factories.IEntityManagerFactory,Calabonga.UnitOfWork.IUnitOfWork{LEotA.Engine.Data.ApplicationDbContext},AutoMapper.IMapper)">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Controllers.LogsWritable2Controller.ValidateQueryParams(Calabonga.Microservices.Core.QueryParams.PagedListQueryParams)">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Controllers.LogsWritableController">
            <summary>
            WritableController Demo
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Extensions.ApplicationBuilderExtensions">
            <summary>
            Extensions for application class
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Extensions.ApplicationBuilderExtensions.UseRouteSlugify(Microsoft.AspNetCore.Mvc.MvcOptions)">
            <summary>
            Use special route slugify for Pegasus routing
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:LEotA.Engine.Web.Extensions.SlugifyParameterTransformer">
            <summary>
            Special route naming convention
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Extensions.SlugifyParameterTransformer.TransformOutbound(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Extensions.AssemblyExtensions">
            <summary>
            Assembly helpers
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Extensions.AssemblyExtensions.GetTypesAssignableFrom``1(System.Reflection.Assembly)">
            <summary>
            Returns types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.Extensions.DateTimeExtensions">
            <summary>
            DateTime extensions
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Extensions.DateTimeExtensions.EachDay(System.DateTime,System.DateTime)">
            <summary>
            Each day enumeration
            </summary>
            <param name="from"></param>
            <param name="thru"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Extensions.DateTimeExtensions.EachMonth(System.DateTime,System.DateTime)">
            <summary>
            Each month enumeration
            </summary>
            <param name="from"></param>
            <param name="thru"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Extensions.DateTimeExtensions.EachDayTo(System.DateTime,System.DateTime)">
            <summary>
            Enumerates all days in period
            </summary>
            <param name="dateFrom"></param>
            <param name="dateTo"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Extensions.DateTimeExtensions.EachMonthTo(System.DateTime,System.DateTime)">
            <summary>
            Enumerates all months in period
            </summary>
            <param name="dateFrom"></param>
            <param name="dateTo"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Extensions.DateTimeExtensions.TotalMonths(System.DateTime,System.DateTime)">
            <summary>
            Total Month count between two dates
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.Extensions.EntityValidatorExtensions">
            <summary>
            Entity Validator Extensions
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Extensions.EntityValidatorExtensions.GetResult(System.Collections.Generic.List{Calabonga.Microservices.Core.Validators.ValidationResult})">
            <summary>
            Returns validator from validation results
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.Extensions.IdentityExtensions">
            <summary>
            Extensions
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Extensions.IdentityExtensions.IsOwner(System.Security.Principal.IIdentity,System.Guid)">
            <summary>
            Returns true/false user is owner
            </summary>
            <param name="source"></param>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Attributes.SwaggerFormAttribute">
            <summary>
            Custom attribute for Swagger Upload Form
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Attributes.SwaggerFormAttribute.#ctor(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:LEotA.Engine.Web.Infrastructure.Attributes.SwaggerFormAttribute.HasFileUpload">
            <summary>
            UploadFile enabled
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.Infrastructure.Attributes.SwaggerFormAttribute.ParameterName">
            <summary>
            Name for the parameter <see cref="T:IFormFile"/>
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.Infrastructure.Attributes.SwaggerFormAttribute.Description">
            <summary>
            Small description
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Attributes.SwaggerGroupAttribute">
             <summary>
             Swagger controller group attribute
             </summary>
            
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Attributes.SwaggerGroupAttribute.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="P:LEotA.Engine.Web.Infrastructure.Attributes.SwaggerGroupAttribute.GroupName">
            <summary>
            Group name
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Attributes.ValidateModelStateAttribute">
            <summary>
            Custom validation handler for availability to whit OperationResult
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Attributes.ValidateModelStateAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Auth.ApplicationClaimsPrincipalFactory">
            <summary>
            Application Claims custom factory
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Auth.ApplicationClaimsPrincipalFactory.#ctor(Microsoft.AspNetCore.Identity.UserManager{LEotA.Engine.Data.ApplicationUser},Microsoft.AspNetCore.Identity.RoleManager{LEotA.Engine.Data.ApplicationRole},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.IdentityOptions})">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Auth.ApplicationClaimsPrincipalFactory.CreateAsync(LEotA.Engine.Data.ApplicationUser)">
            <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsPrincipal" /> from an user asynchronously.
            </summary>
            <param name="user">The user to create a <see cref="T:System.Security.Claims.ClaimsPrincipal" /> from.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous creation operation, containing the created <see cref="T:System.Security.Claims.ClaimsPrincipal" />.</returns>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Auth.AuthorizationPolicyExtensions">
            <summary>
            Authorization Policy registration
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Auth.AuthorizationPolicyExtensions.UseMicroserviceAuthorizationPolicy(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers custom <see cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationHandler"/> for able to use authorization by policy 
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Auth.AuthorizationPolicyProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Auth.AuthorizationPolicyProvider.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Authorization.AuthorizationOptions})">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Auth.AuthorizationPolicyProvider.GetPolicyAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Auth.IdentityServerCorsPolicy">
            <summary>
            Customized CORS policy for IdentityServer4
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Auth.IdentityServerCorsPolicy.IsOriginAllowedAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Auth.MicroservicePermissionHandler">
            <summary>
            Permission handler for custom authorization implementations
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Auth.MicroservicePermissionHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,LEotA.Engine.Web.Infrastructure.Auth.PermissionRequirement)">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Auth.PermissionRequirement">
            <summary>
            Permission requirement for user or service authorization
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.Infrastructure.Auth.PermissionRequirement.PermissionName">
            <summary>
            Permission name
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Auth.UserIdentity">
            <summary>
            Identity helper for Requests operations
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.DependencyInjection.DependencyContainer">
            <summary>
            Registrations for both points: API and Scheduler
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.DependencyInjection.DependencyContainer.Common(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Register 
            </summary>
            <param name="services"></param>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Engine.EntityManagers.LogManager">
            <summary>
            Entity manager for <see cref="T:LEotA.Engine.Entities.Log"/>
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Engine.EntityManagers.LogManager.#ctor(AutoMapper.IMapper,Calabonga.UnitOfWork.Controllers.Factories.IViewModelFactory{LEotA.Engine.Web.ViewModels.LogViewModels.LogCreateViewModel,LEotA.Engine.Web.ViewModels.LogViewModels.LogUpdateViewModel},Calabonga.Microservices.Core.Validators.IEntityValidator{LEotA.Engine.Entities.Log})">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Engine.EntityValidators.LogValidator">
            <summary>
            Entity Validator for <see cref="T:LEotA.Engine.Entities.Log"/>
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Engine.ViewModelFactories.LogViewModelFactory">
            <summary>
            ViewModel factory for <see cref="T:LEotA.Engine.Entities.Log"/>
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Engine.ViewModelFactories.LogViewModelFactory.GenerateForCreateAsync">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Engine.ViewModelFactories.LogViewModelFactory.GenerateForUpdateAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.EventLogs.EventNumbers">
            <summary>
            The number identifiers for events in the microservices
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.EventLogs.LoggerExtensions">
            <summary>
            Event logging as ILogger extension.
            Please see the video as the manual https://youtu.be/09EVKgHgwnM
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.EventLogs.LoggerExtensions.MicroserviceUserRegistration(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Log register action event
            </summary>
            <param name="source"></param>
            <param name="userName"></param>
            <param name="exception"></param>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Helpers.ValidationContextHelper">
            <summary>
            ValidationContext Helper for validation operations
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Helpers.ValidationContextHelper.TryValidate(System.Object,System.Collections.ObjectModel.Collection{System.ComponentModel.DataAnnotations.ValidationResult}@,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Returns validation results of IValidatableObject
            </summary>
            <param name="obj"></param>
            <param name="results"></param>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Mappers.ApplicationUserProfileMapperConfiguration">
            <summary>
            Mapper Configuration for entity Person
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Mappers.ApplicationUserProfileMapperConfiguration.#ctor">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Mappers.Base.IAutoMapper">
            <summary>
            The stub for reflection helper profiles registrations
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Mappers.Base.MapperConfigurationBase">
            <summary>
            Base class for mapper configuration.
            All ViewModel that will be mapped should implement IAutoMapper
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Mappers.Base.PagedListConverter`2">
            <summary>
            Generic converter for IPagedList collections
            </summary>
            <typeparam name="TMapFrom"></typeparam>
            <typeparam name="TMapTo"></typeparam>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Mappers.Base.PagedListConverter`2.Convert(Calabonga.UnitOfWork.IPagedList{`0},Calabonga.UnitOfWork.IPagedList{`1},AutoMapper.ResolutionContext)">
            <summary>Performs conversion from source to destination type</summary>
            <param name="source">Source object</param>
            <param name="destination">Destination object</param>
            <param name="context">Resolution context</param>
            <returns>Destination object</returns>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Mappers.LogMapperConfiguration">
            <summary>
            Mapper Configuration for entity Log
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Mappers.LogMapperConfiguration.#ctor">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Mappers.UserMapperConfiguration">
            <summary>
            Mapper Configuration for entity ApplicationUser
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Mappers.UserMapperConfiguration.#ctor">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Services.AccountService">
            <summary>
            Account service
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.AccountService.GetCurrentUserId">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.AccountService.RegisterAsync(LEotA.Engine.Web.ViewModels.AccountViewModels.RegisterViewModel)">
            <summary>
            Returns <see cref="T:LEotA.Engine.Data.ApplicationUser"/> instance after successful registration
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.AccountService.GetProfileByIdAsync(System.String)">
            <summary>
            Returns user profile
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.AccountService.GetProfileByEmailAsync(System.String)">
            <summary>
            Returns user profile
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.AccountService.GetUserClaimsByIdAsync(System.String)">
            <summary>
            Returns ClaimPrincipal by user identity
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.AccountService.GetUserClaimsByEmailAsync(System.String)">
            <summary>
            Returns ClaimPrincipal by user identity
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.AccountService.GetByIdAsync(System.Guid)">
            <summary>
            Returns user by his identifier
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.AccountService.GetCurrentUserAsync">
            <summary>
            Returns current user account information or null when user does not logged in
            </summary>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.AccountService.GetUsersByEmailsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.AccountService.IsInRolesAsync(System.String[])">
            <summary>
            Check roles for current user
            </summary>
            <param name="roleNames"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.AccountService.GetUsersInRoleAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Services.CacheService">
            <summary>
            Cache service 
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.CacheService.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.CacheService.Get``1(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.CacheService.SetForMinute``1(System.Object,``0)">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.CacheService.SetForThirtyMinutes``1(System.Object,``0)">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.CacheService.SetWithSlidingExpiration``1(System.Object,``0,System.TimeSpan)">
            <summary>
            Default set mechanism
            </summary>
            <typeparam name="TEntry"></typeparam>
            <param name="key"></param>
            <param name="cacheEntry"></param>
            <param name="slidingExpiration"></param>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.CacheService.GetOrCreate``2(``0,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``1})">
            <inheritdoc />
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Services.IAccountService">
            <summary>
            Represent interface for account management
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IAccountService.GetUsersByEmailsAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a collection of the <see cref="T:LEotA.Engine.Data.ApplicationUser"/> by emails
            </summary>
            <param name="emails"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IAccountService.GetCurrentUserId">
            <summary>
            Get User Id from HttpContext
            </summary>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IAccountService.RegisterAsync(LEotA.Engine.Web.ViewModels.AccountViewModels.RegisterViewModel)">
            <summary>
            Returns <see cref="T:LEotA.Engine.Data.ApplicationUser"/> instance after successful registration
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IAccountService.GetProfileByIdAsync(System.String)">
            <summary>
            Returns user profile
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IAccountService.GetProfileByEmailAsync(System.String)">
            <summary>
            Returns user profile
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IAccountService.GetByIdAsync(System.Guid)">
            <summary>
            Returns User by user identifier
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IAccountService.GetUserClaimsByIdAsync(System.String)">
            <summary>
            Returns ClaimPrincipal by user identity
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IAccountService.GetUserClaimsByEmailAsync(System.String)">
            <summary>
            Returns ClaimPrincipal by user identity
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IAccountService.GetCurrentUserAsync">
            <summary>
            Returns current user account information or null when user does not logged in
            </summary>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IAccountService.IsInRolesAsync(System.String[])">
            <summary>
            Check roles for current user
            </summary>
            <param name="roleNames"></param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IAccountService.GetUsersInRoleAsync(System.String)">
            <summary>
            Returns all system administrators registered in the system
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Services.ICacheService">
            <summary>
            Cache service interface
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.ICacheService.Get``1(System.Object)">
            <summary>
            Get the entry from the cache
            </summary>
            <typeparam name="TEntry"></typeparam>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.ICacheService.SetForMinute``1(System.Object,``0)">
            <summary>
            Sets entry cache for one minute sliding expiration
            </summary>
            <typeparam name="TEntry"></typeparam>
            <param name="key"></param>
            <param name="cacheEntry"></param>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.ICacheService.SetForThirtyMinutes``1(System.Object,``0)">
            <summary>
            Sets entry cache for 30 minutes sliding expiration
            </summary>
            <typeparam name="TEntry"></typeparam>
            <param name="key"></param>
            <param name="cacheEntry"></param>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.ICacheService.SetWithSlidingExpiration``1(System.Object,``0,System.TimeSpan)">
            <summary>
            Sets entry cache for custom sliding expiration interval 
            </summary>
            <typeparam name="TEntry"></typeparam>
            <param name="key"></param>
            <param name="cacheEntry"></param>
            <param name="slidingExpiration"></param>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.ICacheService.GetOrCreate``2(``0,System.Func{Microsoft.Extensions.Caching.Memory.ICacheEntry,``1})">
            <summary>
            Returns already exist entry or first put it to the cache and then return entry
            </summary>
            <typeparam name="TEntry"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="key"></param>
            <param name="findIfNotFoundFunc"></param>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Services.IdentityProfileService">
            <summary>
            Custom implementation of the IProfileService
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IdentityProfileService.#ctor(LEotA.Engine.Web.Infrastructure.Services.IAccountService)">
            <summary>
            Identity Profile Service
            </summary>
            <param name="accountService"></param>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IdentityProfileService.GetProfileDataAsync(IdentityServer4.Models.ProfileDataRequestContext)">
            <summary>
            This method is called whenever claims about the user are requested (e.g. during token creation or via the user info endpoint)
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:LEotA.Engine.Web.Infrastructure.Services.IdentityProfileService.IsActiveAsync(IdentityServer4.Models.IsActiveContext)">
            <summary>
            Returns IsActive (IdentityServer4)
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.Infrastructure.Settings.CurrentAppSettings">
            <summary>
            Represents configuration file with current application settings
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.Infrastructure.Settings.CurrentAppSettings.PageSize">
            <summary>
            Default page size
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.Account.ProfileRequest">
            <summary>
            Request: Profile
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.Account.ProfileRequestHandler">
            <summary>
            Response: Profile
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.Account.RegisterRequest">
            <summary>
            Request: Register new account
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.Account.RegisterRequestHandler">
            <summary>
            Response: Register new account
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.Behaviors.ValidatorBehavior`2">
            <summary>
            Base validator for requests
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:LEotA.Engine.Web.Mediator.Behaviors.ValidatorBehavior`2.Handle(`0,System.Threading.CancellationToken,MediatR.RequestHandlerDelegate{`1})">
            <summary>
            Pipeline handler. Perform any additional behavior and await the <paramref name="next" /> delegate as necessary
            </summary>
            <param name="request">Incoming request</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="next">Awaitable delegate for the next action in the pipeline. Eventually this delegate represents the handler.</param>
            <returns>Awaitable task returning the <typeparamref name="TResponse" /></returns>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.LogsReadonly.GetRolesRequest">
            <summary>
            Request: Returns user roles 
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.LogsReadonly.LogGetByIdRequest">
            <summary>
            Request for Log by Identifier
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Mediator.LogsReadonly.LogGetByIdRequest.#ctor(System.Guid)">
            <summary>
            Request for Log by Identifier
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.LogsReadonly.LogGetByIdRequestHandler">
            <summary>
            Response for  Request for Log by Identifier
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.LogsReadonly.LogGetPagedRequest">
            <summary>
            Request for paged list of Logs
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Mediator.LogsReadonly.LogGetPagedRequest.#ctor(Calabonga.Microservices.Core.QueryParams.PagedListQueryParams)">
            <summary>
            Request for paged list of Logs
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.LogsReadonly.LogGetPagedRequestHandler">
            <summary>
            Request for paged list of Logs
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.LogsWritable.LogDeleteItemRequest">
            <summary>
            Request: Log delete
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Mediator.LogsWritable.LogDeleteItemRequest.#ctor(System.Guid)">
            <summary>
            Request: Log delete
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.LogsWritable.LogDeleteItemRequestHandler">
            <summary>
            Request: Log delete
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.LogsWritable.LogPostItemRequest">
            <summary>
            Request: Log creation
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Mediator.LogsWritable.LogPostItemRequest.#ctor(LEotA.Engine.Web.ViewModels.LogViewModels.LogCreateViewModel)">
            <summary>
            Request: Log creation
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.LogsWritable.LogPostItemRequestHandler">
            <summary>
            Request: Log creation
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.LogsWritable.LogPutItemRequest">
            <summary>
            Request: Log edit
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Mediator.LogsWritable.LogPutItemRequest.#ctor(LEotA.Engine.Web.ViewModels.LogViewModels.LogUpdateViewModel)">
            <summary>
            Request: Log edit
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Mediator.LogsWritable.LogPutItemRequestHandler">
            <summary>
            Request: Log creation
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.Middlewares.ErrorHandlingMiddleware">
            <summary>
            Custom error handler. It allows to view error messages on UI
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Middlewares.ErrorHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Middlewares.ErrorHandlingMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invoke middle ware. Entry point
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.Middlewares.ApplicationBuilderExtensions">
            <summary>
            ETagger extension
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Middlewares.ApplicationBuilderExtensions.UseETagger(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Use Custom middleware
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:LEotA.Engine.Web.Middlewares.ETagMiddleware">
            <summary>
            ETag middleware from Mads Kristensen.
            See https://madskristensen.net/blog/send-etag-headers-in-aspnet-core/
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Middlewares.ETagMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <inheritdoc />
        </member>
        <member name="M:LEotA.Engine.Web.Middlewares.ETagMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invoke middleware entry point
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:LEotA.Engine.Web.Startup">
            <summary>
            Entry point
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.Startup.Configuration">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="M:LEotA.Engine.Web.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:LEotA.Engine.Web.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,AutoMapper.IConfigurationProvider)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="mapper"></param>
        </member>
        <member name="T:LEotA.Engine.Web.ViewModels.AccountViewModels.RegisterViewModel">
            <summary>
            Data transfer object for user registration
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.RegisterViewModel.FirstName">
            <summary>
            FirstName
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.RegisterViewModel.LastName">
            <summary>
            LastName
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.RegisterViewModel.PatronimicName">
            <summary>
            PatronimicName
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.RegisterViewModel.EmbedLink">
            <summary>
            EmbedLink
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.RegisterViewModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.RegisterViewModel.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.RegisterViewModel.ConfirmPassword">
            <summary>
            Password confirmation
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.ViewModels.AccountViewModels.RegisterRequestValidator">
            <summary>
            RegisterViewModel Validator
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.ViewModels.AccountViewModels.UserProfileViewModel">
            <summary>
            Application User Profile
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.UserProfileViewModel.Id">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.UserProfileViewModel.FirstName">
            <summary>
            FirstName
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.UserProfileViewModel.LastName">
            <summary>
            LastName
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.UserProfileViewModel.PatronomicName">
            <summary>
            PatronomicName
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.UserProfileViewModel.EmbedLink">
            <summary>
            EmbedLink
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.UserProfileViewModel.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.UserProfileViewModel.Roles">
            <summary>
            User Roles
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.UserProfileViewModel.PhoneNumber">
            <summary>
            User PhoneNumber
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.AccountViewModels.UserProfileViewModel.PositionName">
            <summary>
            Position Name
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.ViewModels.LogViewModels.LogCreateViewModel">
            <summary>
            Data Transfer Object for Log entity
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.LogViewModels.LogCreateViewModel.CreatedAt">
            <summary>
            Log Created At
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.LogViewModels.LogCreateViewModel.Logger">
            <summary>
            Service name or provider
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.LogViewModels.LogCreateViewModel.Level">
            <summary>
            Log level for logging. See <see cref="T:Microsoft.Extensions.Logging.LogLevel"/>
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.LogViewModels.LogCreateViewModel.Message">
            <summary>
            Log Message
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.LogViewModels.LogCreateViewModel.ThreadId">
            <summary>
            Thread identifier
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.LogViewModels.LogCreateViewModel.ExceptionMessage">
            <summary>
            Exception message
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.ViewModels.LogViewModels.LogUpdateViewModel">
            <summary>
            Log View model for Update operations
            </summary>
        </member>
        <member name="T:LEotA.Engine.Web.ViewModels.LogViewModels.LogViewModel">
            <summary>
            Log ViewModel
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.LogViewModels.LogViewModel.CreatedAt">
            <summary>
            Created at
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.LogViewModels.LogViewModel.Logger">
            <summary>
            Logger name
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.LogViewModels.LogViewModel.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.LogViewModels.LogViewModel.Message">
            <summary>
            Message text
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.LogViewModels.LogViewModel.ThreadId">
            <summary>
            Thread ID
            </summary>
        </member>
        <member name="P:LEotA.Engine.Web.ViewModels.LogViewModels.LogViewModel.ExceptionMessage">
            <summary>
            
            </summary>
        </member>
        <member name="T:ThisAssembly">
            <summary>Provides access to the current assembly information.</summary>
        </member>
        <member name="T:ThisAssembly.Git">
            <summary>Provides access to the git information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>IsDirty: false</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>IsDirtyString: false</summary>
        </member>
        <member name="F:ThisAssembly.Git.RepositoryUrl">
            <summary>Repository URL: https://github.com/fizzlefrost/LEotA.git</summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>Branch: backup</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>Commit: e389c58</summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>Sha: e389c589cba3ca2e93314d338e6a0c3084517a02</summary>
        </member>
        <member name="F:ThisAssembly.Git.CommitDate">
            <summary>Commit date: 2021-10-23T16:48:37+09:00</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>Commits on top of base version: 39</summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>Tag: </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>Base tag: </summary>
        </member>
        <member name="T:ThisAssembly.Git.BaseVersion">
            <summary>Provides access to the base version information used to determine the <see cref="T:ThisAssembly.Git.SemVer" />.</summary>      
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>Major: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>Minor: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>Patch: 0</summary>
        </member>
        <member name="T:ThisAssembly.Git.SemVer">
            <summary>Provides access to SemVer information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>Major: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>Minor: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>Patch: 39</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>Label: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>Label with dash prefix: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>Source: Default</summary>
        </member>
    </members>
</doc>
